<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <style>
        /* Overall improvements */
        body {
            background-color: #f8f9fa;
        }
        .content-wrapper {
            padding: 20px;
        }
        .form-container {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        .form-section {
            padding: 20px;
            border-bottom: 1px solid #eee;
        }
        .form-section:last-child {
            border-bottom: none;
        }
        .section-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
        }
        .section-title i {
            margin-right: 10px;
            color: #4e73df;
        }
        .form-label {
            font-weight: 500;
            margin-bottom: 8px;
            color: #495057;
        }
        .form-control, .form-select {
            padding: 10px 15px;
            border-radius: 4px;
            border: 1px solid #ced4da;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        .form-control:focus, .form-select:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        /* Content header */
        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
        }
        .content-title {
            font-size: 24px;
            font-weight: 600;
            margin: 0;
            color: #333;
        }
        .btn-publish {
            background-color: #4e73df;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            font-weight: 500;
            transition: background-color 0.2s;
        }
        .btn-publish:hover {
            background-color: #375ad3;
        }
        
        /* Image upload section */
        .image-preview-container {
            width: 100%;
            height: 200px;
            margin-bottom: 10px;
            display: none;
            position: relative;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            overflow: hidden;
        }
        .image-preview-container img {
            max-width: 100%;
            max-height: 100%;
            display: block;
        }
        .cropper-container {
            width: 100% !important;
            height: 200px !important;
            margin-bottom: 15px;
        }
        .input-upload {
            margin-bottom: 15px;
            position: relative;
            padding: 15px;
            border: 1px dashed #dee2e6;
            border-radius: 4px;
            text-align: center;
            background: #f8f9fa;
            transition: all 0.2s;
        }
        .input-upload:hover {
            border-color: #4e73df;
        }
        .input-upload img {
            max-width: 100%;
            height: auto;
            max-height: 120px;
            margin-bottom: 10px;
            border-radius: 4px;
        }
        #croppedImg1, #croppedImg2, #croppedImg3 {
            display: none;
        }
        .media-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
        }
        .btn-sm {
            margin-top: 10px;
            width: 100%;
            padding: 8px 16px;
            font-size: 14px;
            background-color: #4e73df;
            color: #fff;
            border: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        .btn-sm:hover {
            background-color: #375ad3;
        }
        .cropper-view-box {
            outline: 2px solid #4e73df;
        }
        .cropper-point {
            background-color: #4e73df;
        }
        .cropper-line {
            background-color: #4e73df;
        }
        
        /* Error messages */
        .error-message {
            color: #dc3545;
            font-size: 12px;
            margin-top: 5px;
            display: none;
        }
        
        /* Tabs for organizing content */
        .nav-tabs {
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 20px;
        }
        .nav-tabs .nav-link {
            border: 1px solid transparent;
            border-top-left-radius: 4px;
            border-top-right-radius: 4px;
            color: #6c757d;
            font-weight: 500;
            padding: 10px 20px;
        }
        .nav-tabs .nav-link:hover {
            border-color: #e9ecef #e9ecef #dee2e6;
        }
        .nav-tabs .nav-link.active {
            color: #495057;
            background-color: #fff;
            border-color: #dee2e6 #dee2e6 #fff;
        }
        .tab-content > .tab-pane {
            display: none;
        }
        .tab-content > .active {
            display: block;
        }
        
        /* Responsive improvements */
        @media (max-width: 992px) {
            .media-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        @media (max-width: 768px) {
            .media-grid {
                grid-template-columns: 1fr;
            }
            .form-row {
                flex-direction: column;
            }
            .form-row > div {
                width: 100%;
                margin-right: 0;
                margin-bottom: 15px;
            }
        }
        
        /* Two column layout */
        .form-row {
            display: flex;
            margin-right: -10px;
            margin-left: -10px;
        }
        .form-row > div {
            padding-right: 10px;
            padding-left: 10px;
            flex: 1;
        }
        /* Form groups */
        .form-group {
            margin-bottom: 15px;
        }
        /* Card styling */
        .card {
            border: none;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .card-header {
            padding: 15px 20px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
        }
        .card-body {
            padding: 20px;
        }
        /* Scrollable tabs */
        .scrollable-tab-content {
            max-height: calc(100vh - 250px);
            overflow-y: auto;
            padding-right: 10px;
        }
        .sticky-header {
            position: sticky;
            top: 0;
            z-index: 100;
            background-color: #fff;
        }
    </style>
</head>

<div class="content-wrapper">
    <div class="content-header sticky-header">
        <h2 class="content-title">Add New Product</h2>
        <div>
            <button class="btn-publish" type="submit" form="product-form">Publish</button>
        </div>
    </div>
    
    <form id="product-form" method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
        <div class="row">
            <div class="col-lg-9">
                <!-- Tabs for better organization -->
                <ul class="nav nav-tabs" id="productTabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="basic-tab" data-toggle="tab" href="#basic" role="tab">Basic Information</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="description-tab" data-toggle="tab" href="#description" role="tab">Description & Specs</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="media-tab" data-toggle="tab" href="#media" role="tab">Media</a>
                    </li>
                </ul>
                
                <div class="tab-content scrollable-tab-content" id="productTabContent">
                    <!-- Basic Information Tab -->
                    <div class="tab-pane fade show active" id="basic" role="tabpanel">
                        <div class="card">
                            <div class="card-header">
                                <h4>Product Information</h4>
                            </div>
                            <div class="card-body">
                                <div class="form-group">
                                    <label for="product_name" class="form-label">Product Title</label>
                                    <input type="text" placeholder="Enter product name" class="form-control" id="product_name" name="productName" required>
                                </div>
                                
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Category</label>
                                        <select class="form-select form-control" name="category" required>
                                            <option value="">Select a category</option>
                                            <% cat.forEach(category => { %>
                                                <option value="<%= category.name %>"><%= category.name %></option>
                                            <% }) %>
                                        </select>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label">Brand</label>
                                        <select class="form-select form-control" name="brand">
                                            <option value="">Select a brand</option>
                                            <% for (let i = 0; i < brand.length; i++) { %>
                                                <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                            <% } %>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" type="number" class="form-control" name="regularPrice" required>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label">Sale Price</label>
                                        <input placeholder="$" type="number" class="form-control" name="salePrice" required>
                                    </div>
                                </div>
                                
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Quantity</label>
                                        <input name="quantity" type="text" class="form-control">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                    
                                    <div class="form-group">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Description Tab -->
                    <div class="tab-pane fade" id="description" role="tabpanel">
                        <div class="card">
                            <div class="card-header">
                                <h4>Product Details</h4>
                            </div>
                            <div class="card-body">
                                <div class="form-group">
                                    <label class="form-label">Short description</label>
                                    <textarea placeholder="Brief product description" class="form-control" rows="3" name="description" required></textarea>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Full description</label>
                                    <textarea placeholder="Detailed product description" class="form-control" rows="5" name="longDescription" required></textarea>
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">Specifications</label>
                                    <textarea placeholder="Technical specifications" class="form-control" rows="5" name="specifications" required></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Media Tab -->
                    <div class="tab-pane fade" id="media" role="tabpanel">
                        <div class="card">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <p class="text-muted mb-3">Upload exactly 4 product images (JPG, JPEG, PNG). Each image must be less than 5MB.</p>
                                
                                <div class="media-grid">
                                    <div class="input-upload">
                                        <img src="/assets/imgs/theme/upload.svg" id="croppedImg1" alt="Product Image 1">
                                        <div class="image-preview-container" id="preview1">
                                            <img id="imgView1" src="" alt="">
                                        </div>
                                        <input class="form-control" type="file" name="images" id="input1"
                                        accept="image/png, image/jpeg, image/jpg, image/webp"
                                        onchange="viewImage(event,1)">
                                        <div id="image-error" class="error-message"></div>
                                        <button type="button" id="saveButton1" class="btn-sm">Save Image</button>
                                        <input type="hidden" name="croppedImages" id="croppedImage1">
                                    </div>
                                    
                                    <div class="input-upload">
                                        <img src="/assets/imgs/theme/upload.svg" id="croppedImg2" alt="Product Image 2">
                                        <div class="image-preview-container" id="preview2">
                                            <img id="imgView2" src="" alt="">
                                        </div>
                                        <input class="form-control" type="file" name="images" id="input2"
                                        accept="image/png, image/jpeg, image/jpg , image/webp"
                                        onchange="viewImage(event,2)">
                                        <div id="image-error" class="error-message"></div>
                                        <button type="button" id="saveButton2" class="btn-sm">Save Image</button>
                                        <input type="hidden" name="croppedImages" id="croppedImage2">
                                    </div>
                                    
                                    <div class="input-upload">
                                        <img src="/assets/imgs/theme/upload.svg" id="croppedImg3" alt="Product Image 3">
                                        <div class="image-preview-container" id="preview3">
                                            <img id="imgView3" src="" alt="">
                                        </div>
                                        <input class="form-control" type="file" name="images" id="input3"
                                        accept="image/png, image/jpeg, image/jpg , image/webp"
                                        onchange="viewImage(event,3)">
                                        <div id="image-error" class="error-message"></div>
                                        <button type="button" id="saveButton3" class="btn-sm">Save Image</button>
                                        <input type="hidden" name="croppedImages" id="croppedImage3">
                                    </div>
                                    <div class="input-upload">
                                        <img src="/assets/imgs/theme/upload.svg" id="croppedImg4" alt="Product Image 4">
                                        <div class="image-preview-container" id="preview4">
                                            <img id="imgView4" src="" alt="">
                                        </div>
                                        <input class="form-control" type="file" name="images" id="input4"
                                        accept="image/png, image/jpeg, image/jpg image/webp"
                                        onchange="viewImage(event,4)">
                                        <div id="image-error" class="error-message"></div>
                                        <button type="button" id="saveButton4" class="btn-sm">Save Image</button>
                                        <input type="hidden" name="croppedImages" id="croppedImage4">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Right Sidebar -->
            <div class="col-lg-3">
                <div class="card">
                    <div class="card-header">
                        <h4>Publish</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-grid">
                            <button class="btn-publish" type="submit">Publish Product</button>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h4>Checklist</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Product Information</span>
                                <span class="badge bg-primary rounded-pill" id="basic-check">✓</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Description & Specs</span>
                                <span class="badge bg-secondary rounded-pill" id="desc-check">-</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Media (4 images)</span>
                                <span class="badge bg-secondary rounded-pill" id="media-check">-</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<script>
let cropperInstances = {};

// Validate form before submission
function validateForm() {
    // Get form inputs
    const productName = document.querySelector('input[name="productName"]').value.trim();
    const description = document.querySelector('textarea[name="description"]').value.trim();
    const longDescription = document.querySelector('textarea[name="longDescription"]').value.trim();
    const specifications = document.querySelector('textarea[name="specifications"]').value.trim();
    const regularPrice = document.querySelector('input[name="regularPrice"]').value.trim();
    const salePrice = document.querySelector('input[name="salePrice"]').value.trim();
    const category = document.querySelector('select[name="category"]').value;
    const imageInputs = document.querySelectorAll('input[type="file"]');
    let imageCount = 0;

    // Check how many images are selected
    imageInputs.forEach(input => {
        if (input.files && input.files.length > 0) {
            imageCount++;
        }
    });

    // Validation messages
    const errors = [];

    // Product name validation
    if (!productName) {
        errors.push('Product name is required');
    } else if (productName.length < 3) {
        errors.push('Product name must be at least 3 characters long');
    }

    // Description validation
    if (!description) {
        errors.push('Short description is required');
    } else if (description.length < 10) {
        errors.push('Short description must be at least 10 characters long');
    }

    // Long description validation
    if (!longDescription) {
        errors.push('Full description is required');
    } else if (longDescription.length < 20) {
        errors.push('Full description must be at least 20 characters long');
    }

    // Specifications validation
    if (!specifications) {
        errors.push('Specifications are required');
    } else if (specifications.length < 10) {
        errors.push('Specifications must be at least 10 characters long');
    }

    // Price validation
    if (!regularPrice) {
        errors.push('Regular price is required');
    } else if (isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
        errors.push('Regular price must be a positive number');
    }

    if (!salePrice) {
        errors.push('Sale price is required');
    } else if (isNaN(salePrice) || parseFloat(salePrice) <= 0) {
        errors.push('Sale price must be a positive number');
    } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
        errors.push('Sale price must be less than regular price');
    }

    // Category validation
    if (!category) {
        errors.push('Category is required');
    }

    // Image validation
    if (imageCount !== 4) {
        errors.push('Exactly 4 product images are required');
    } else {
        // Validate each selected image
        imageInputs.forEach(input => {
            if (input.files && input.files.length > 0) {
                const file = input.files[0];
                const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
                const maxSize = 5 * 1024 * 1024; // 5MB

                if (!validTypes.includes(file.type)) {
                    errors.push('Only JPG, JPEG, and PNG images are allowed');
                }
                if (file.size > maxSize) {
                    errors.push('Image size must be less than 5MB');
                }
            }
        });
    }

    // Display errors if any
    if (errors.length > 0) {
        alert(errors.join('\n'));
        return false;
    }

    return true;
}

// Handle image preview and cropping
function viewImage(event, index) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        const image = document.getElementById('imgView' + index);
        const preview = document.getElementById('preview' + index);
        const croppedImg = document.getElementById('croppedImg' + index);
        
        croppedImg.style.display = 'none';
        preview.style.display = 'block';
        
        image.src = e.target.result;

        image.onload = function() {
            if (cropperInstances[index]) {
                cropperInstances[index].destroy();
            }

            // Create new cropper
            cropperInstances[index] = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true,
                minCropBoxWidth: 200,
                minCropBoxHeight: 200,
                ready() {
                    this.cropper.setData({
                        width: 450,
                        height: 490
                    });
                }
            });
        };
    };
    reader.readAsDataURL(file);
}

// Handle save button functionality
document.querySelectorAll('[id^="saveButton"]').forEach(button => {
    button.addEventListener('click', function() {
        const index = this.id.replace('saveButton', '');
        if (cropperInstances[index]) {
            const canvas = cropperInstances[index].getCroppedCanvas({
                width: 450,
                height: 490
            });
            const croppedImage = document.getElementById('croppedImg' + index);
            const preview = document.getElementById('preview' + index);
            const hiddenInput = document.getElementById('croppedImage' + index);
            
            // Show cropped image and hide preview
            croppedImage.src = canvas.toDataURL();
            croppedImage.style.display = 'block';
            preview.style.display = 'none';
            
            // Store the cropped image data
            hiddenInput.value = canvas.toDataURL();
            
            // Convert canvas to blob and update file input
            canvas.toBlob(blob => {
                const file = new File([blob], `cropped-${index}.jpg`, { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                document.getElementById(`input${index}`).files = dataTransfer.files;
            });
            
            // Update the media checklist
            updateChecklist();
        }
    });
});

// Tab navigation
document.addEventListener('DOMContentLoaded', function() {
    const tabLinks = document.querySelectorAll('.nav-link');
    const tabContents = document.querySelectorAll('.tab-pane');
    
    tabLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Remove active class from all tabs
            tabLinks.forEach(tab => tab.classList.remove('active'));
            tabContents.forEach(content => {
                content.classList.remove('show', 'active');
            });
            
            // Add active class to selected tab
            this.classList.add('active');
            const tabId = this.getAttribute('href').substring(1);
            document.getElementById(tabId).classList.add('show', 'active');
        });
    });
    
    // Setup checklist update events
    const formInputs = document.querySelectorAll('input, textarea, select');
    formInputs.forEach(input => {
        input.addEventListener('change', updateChecklist);
    });
    
    // Initial checklist update
    updateChecklist();
});

// Update checklist badges
function updateChecklist() {
    // Basic information check
    const productName = document.querySelector('input[name="productName"]').value.trim();
    const regularPrice = document.querySelector('input[name="regularPrice"]').value.trim();
    const salePrice = document.querySelector('input[name="salePrice"]').value.trim();
    const category = document.querySelector('select[name="category"]').value;
    
    const basicComplete = productName && regularPrice && salePrice && category;
    document.getElementById('basic-check').textContent = basicComplete ? '✓' : '-';
    document.getElementById('basic-check').className = basicComplete ? 'badge bg-success rounded-pill' : 'badge bg-secondary rounded-pill';
    
    // Description check
    const description = document.querySelector('textarea[name="description"]').value.trim();
    const longDescription = document.querySelector('textarea[name="longDescription"]').value.trim();
    const specifications = document.querySelector('textarea[name="specifications"]').value.trim();
    
    const descComplete = description && longDescription && specifications;
    document.getElementById('desc-check').textContent = descComplete ? '✓' : '-';
    document.getElementById('desc-check').className = descComplete ? 'badge bg-success rounded-pill' : 'badge bg-secondary rounded-pill';
    
    // Media check
    const imageInputs = document.querySelectorAll('input[type="file"]');
    let imageCount = 0;
    
    imageInputs.forEach(input => {
        if (input.files && input.files.length > 0) {
            imageCount++;
        }
    });
    
    const mediaComplete = imageCount === 4;
    document.getElementById('media-check').textContent = mediaComplete ? '✓' : `${imageCount}/4`;
    document.getElementById('media-check').className = mediaComplete ? 'badge bg-success rounded-pill' : 'badge bg-secondary rounded-pill';
}
</script>

<%- include("../../views/partials/admin/footer") %>